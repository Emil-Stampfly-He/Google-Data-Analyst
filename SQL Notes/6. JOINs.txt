# JOIN：用来将两个或多个表中的数据按照某种关联关系合并起来的操作
# 有点像VLOOUP

# INNER JOIN：返回两个表中符合条件的交集

SELECT
	employees.name AS employee_name,
	employees.role AS employee_role,
	departments.name AS department_name
FROM
	`employees-table---understanding-joins` AS employees
INNER JOIN
	`departments-table---understanding-joins` AS departments
	ON employees.department_id = departments.department_id


# LEFT JOIN：返回左表中所有记录以及右表中符合条件的记录
# 第一个被提及的表是“左表”，第二个被提及的表是“右表”
# 下例中，employees是“左表”，department是“右表”

SELECT
	employees.name AS employee_name,
	employees.role AS employee_role,
	departments.name AS department_name
FROM
	`employees-table---understanding-joins` AS employees
LEFT JOIN
	`departments-table---understanding-joins` AS departments
	ON employees.department_id = departments.department_id


# RIGHT JOIN： 返回右表中所有记录以及左表中符合条件的记录

SELECT
	employees.name AS employee_name,
	employees.role AS employee_role,
	departments.name AS department_name
FROM
	`employees-table---understanding-joins` AS employees
RIGHT JOIN
	`departments-table---understanding-joins` AS departments
	ON employees.department_id = departments.department_id


# OUTER JOIN：返回左表和右表中的所有记录，如果没有匹配的记录则填充NULL值
# 联合使用LEFT JOIN和RIGHT JOIN：UNION

SELECT
	employees.name AS employee_name,
	employees.role AS employee_role,
	departments.name AS department_name
FROM
	`employees-table---understanding-joins` AS employees
LEFT JOIN
	`departments-table---understanding-joins` AS departments
	ON employees.department_id = departments.department_id
UNION
SELECT
	employees.name AS employee_name,
	employees.role AS employee_role,
	departments.name AS department_name
FROM
	`employees-table---understanding-joins` AS employees
RIGHT JOIN
	`departments-table---understanding-joins` AS departments
	ON employees.department_id = departments.department_id
WHERE
	employees.department_id IS NULL
	# 过滤掉LEFT JOIN 中右表中的NULL值